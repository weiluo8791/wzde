<?php/*******************************************************************************transfer File via ftpsversion 1.0 date    5/1/2014by      Wei Qi Luo*******************************************************************************/global $ALLOW_OPS;$ALLOW_OPS = array('check','del','nop_del','add','nop_add');//in    : List of file in the format of zone/sites/folder/file^ops//return: FALSE=error TRUE=successfullyfunction ftpsOperation_multi($fileList) {    global $ALLOW_OPS;    $ini_array = parse_ini_file(INIFILE,TRUE);    //get unique all possible operation in the file list    $all_ops=array_unique(array_map("getOps", array_values($fileList)));    //if other than ALLOW_OPS stop the function    if (!empty(array_diff($all_ops,$ALLOW_OPS))) {        return FALSE;    }    //if DEBUG is set open the debug file for writing    if (DEBUGLOG) {        $debugfile = fopen(DEBUGLOG, "ab");    }    //start cUrl handle    $ch = curl_init();             for ($i = 0; $i < count($fileList); $i++)    {        $ops = getOps($fileList[$i]);        $val = getFile($fileList[$i]);        $zone = strstr($val, '/', true);        $path = substr(strstr($val, '/'),1);        $server = $ini_array[strtoupper($zone)]["SERVER"];        $source = WZDE_SOURCE . $zone . "/" . $path;        $target = $ini_array[strtoupper($zone)]["TARGET_FOLDER"] . $path;        $ftp_server = "ftp://".$server.".meditech.com";                            //connection port        curl_setopt($ch, CURLOPT_PORT, 21);        //SSL stuff        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);        curl_setopt($ch, CURLOPT_FTP_SSL, CURLOPT_FTPSSLAUTH);        curl_setopt($ch, CURLOPT_USERPWD, FTPUSER . ":" . base64_decode(FTPPASS));         //end SSL                            //enable if debug         if (DEBUGLOG) {            curl_setopt($ch, CURLOPT_VERBOSE, TRUE);            curl_setopt($ch, CURLOPT_STDERR,$debugfile);                              }        else {            curl_setopt($ch, CURLOPT_VERBOSE, FALSE);         }            //operation        switch ($ops) {        //check if file exists        case 'check' :            curl_setopt($ch, CURLOPT_NOBODY, true);            curl_setopt($ch, CURLOPT_URL, $ftp_server);            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);            curl_setopt($ch, CURLOPT_QUOTE, array('SIZE ' . $target));            break;        //delete published file        case 'del' :            curl_setopt($ch, CURLOPT_URL, $ftp_server);            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);            curl_setopt($ch, CURLOPT_QUOTE, array('DELE ' . $target));            break;        //delete published folder (must be empty)        case 'nop_del' :            curl_setopt($ch, CURLOPT_URL, $ftp_server);            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);            curl_setopt($ch, CURLOPT_QUOTE, array('RMD ' . $target));            break;        //upload file        case 'add' :            $remote_file = $target;            $file = $source;            $fp = fopen($file, 'r');            curl_setopt($ch, CURLOPT_URL, $ftp_server.$remote_file);            curl_setopt($ch, CURLOPT_UPLOAD, TRUE);            curl_setopt($ch, CURLOPT_INFILE, $fp);            curl_setopt($ch, CURLOPT_FTP_CREATE_MISSING_DIRS, TRUE);            curl_setopt($ch, CURLOPT_INFILESIZE, filesize($file));            break;        //nop_add means just update the status on SQL table for directory and go to next iteration             case 'nop_add' :            //updateFilesTable($zone . "/" . $path, gmdate('Y-m-d H:i:s', strtotime(date('Y-m-d H:i:s'))),$ch);            continue 2;                   } //end switch                if (DEBUGLOG)            fwrite($debugfile,date('YmdHis'). "\r\n");        //Execute cURL        curl_exec ($ch);        if (DEBUGLOG)            fwrite($debugfile,"\r\n\r\n");                    $error_no = curl_errno($ch);        $error_msg = curl_error($ch);                if($ops == 'check') {            $info = curl_getinfo($ch, CURLINFO_HTTP_CODE);        }        //if upload close uploaded file handler        if($ops == 'add') {            fclose($fp);        }        //if no error log the event and update table        if ($error_no == 0) {            $error = 'successfully';            logEvent($server,$ops,"success",$source,$target);            if ($ops=='add') {                //updateFilesTable($zone . "/" . $path, gmdate('Y-m-d H:i:s', strtotime(date('Y-m-d H:i:s'))),$ch);            }        }         else {            $error = $error_msg;            logEvent($server,$ops,"error" . $error_no,$source,$target);        }            }// end for loop        //close cUrl handle    curl_close($ch);    //close debug handler    if (DEBUGLOG) {        fclose($debugfile);    }  }//end functionfunction getOps($val) {    return cut_string_using_last('^', $val, 'right', false);}function getFile($val) {    return cut_string_using_last('^', $val, 'left', false);}function logEvent($server,$ops,$status,$source="",$target) {		if (!$handle = fopen(EVENTLOG, 'ab')) {		echo "Cannot open file ".EVENTLOG;        		exit;	}		$timeStamp = date('YmdHis');	$logEntry = $timeStamp . "|" . $server . "|" . $ops . "|" . $status . "|" . $source . "|" . $target . "\r\n";		// Write $logEntry to our opened file.	if (fwrite($handle, $logEntry) === FALSE) {		echo "Cannot write to file ".EVENTLOG;		exit;	}	fclose($handle);}//in    :path/filename,pbublish_date,current_cUrl_handlefunction updateFilesTable($path_filename,$pDate,$ch) {    $path = cut_string_using_last('/', $path_filename, 'left', false);    $file = cut_string_using_last('/', $path_filename, 'right', false);    $user = FTPUSER;    $pass = FTPPASS;    $bindV = array(        'pdate' => $pDate,        'status' => "PUBLISHED",        'path' => $path,        'file' => $file    );    $form_fields = array(                     'query' => "update webutility.wzde_files set publishdate = :pdate, status = :status where path = :path and filename = :file",                     'bindV' => $bindV,                     );        //POST Data to update the wzde_files table    $url = 'https://wwwzonecode.meditech.com:8080/manage/php/mariadb_query.php';      //Setup request to send json via POST    $payload = json_encode( $form_fields );    //reuse the current cUrl handle but reset all the option.    curl_reset($ch);    curl_setopt($ch, CURLOPT_URL, $url);  	//debug 	if (DEBUGLOG) {		curl_setopt($ch, CURLOPT_VERBOSE, TRUE);		curl_setopt($ch, CURLOPT_STDERR,$debugfile = fopen(DEBUGLOG, "ab"));		fwrite($debugfile,date('YmdHis'). "\r\n");	}	else {		curl_setopt($ch, CURLOPT_VERBOSE, FALSE); 	}        //SSL stuff    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);	curl_setopt($ch, CURLOPT_FTP_SSL, CURLOPT_FTPSSLAUTH);        //Using NTLM auth    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_NTLM);    curl_setopt($ch, CURLOPT_USERPWD, $user . ":" . base64_decode($pass));    //payload    curl_setopt($ch, CURLOPT_POST, true);       curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);        curl_setopt( $ch, CURLOPT_POSTFIELDS, $payload );    //Return response instead of printing.    curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );        curl_setopt( $ch, CURLOPT_HTTPHEADER, array(        'Content-Type:application/json',                                                                                      'Origin: https://wwwzonecode.meditech.com:8080'        ));        //Send request but do not close the handle    curl_exec($ch);}/**  * Removes the proceeding or proceeding portion of a string  * relative to the last occurrence of the specified character.  * The character selected may be retained or discarded.  *  * Example usage:  * <code>  * $example = 'http://example.com/path/file.php';  * $cwd_relative[] = cut_string_using_last('/', $example, 'left', true);  * $cwd_relative[] = cut_string_using_last('/', $example, 'left', false);  * $cwd_relative[] = cut_string_using_last('/', $example, 'right', true);  * $cwd_relative[] = cut_string_using_last('/', $example, 'right', false);  * foreach($cwd_relative as $string) {  *     echo "$string <br>".PHP_EOL;  * }  * </code>  *  * Outputs:  * <code>  * http://example.com/path/  * http://example.com/path  * /file.php  * file.php  * </code>  *  * @param string $character the character to search for.  * @param string $string the string to search through.  * @param string $side determines whether text to the left or the right of the character is returned.  * Options are: left, or right.  * @param bool $keep_character determines whether or not to keep the character.  * Options are: true, or false.  * @return string  */   function cut_string_using_last($character, $string, $side, $keep_character=true) {     $offset = ($keep_character ? 1 : 0);     $whole_length = strlen($string);     $right_length = (strlen(strrchr($string, $character)) - 1);     $left_length = ($whole_length - $right_length - 1);     switch($side) {         case 'left':             $piece = substr($string, 0, ($left_length + $offset));             break;         case 'right':             $start = (0 - ($right_length + $offset));             $piece = substr($string, $start);             break;         default:             $piece = false;             break;     }     return($piece); }